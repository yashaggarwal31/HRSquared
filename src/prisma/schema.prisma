generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = "postgres://tmsdb_stli_user:e9xMpaWVMWOG6mepVfFQd8uY6XaUDv4F@dpg-cof58cocmk4c7380j3l0-a.oregon-postgres.render.com/tmsdb_stli"
}

model category {
    id               BigInt             @id @default(autoincrement())
    categoryname     String
    group_id         BigInt?
    groups           groups?            @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    tickets          tickets[]
    userrole_mapping userrole_mapping[]
}

model feedbacks {
    id          BigInt    @id @default(autoincrement())
    title       String
    description String
    createdby   BigInt?
    createdat   DateTime? @default(now()) @db.Timestamptz(6)
    viewed      Boolean   @default(false)
    users       users?    @relation(fields: [createdby], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model groups {
    id               BigInt             @id @default(autoincrement())
    groupname        String
    category         category[]
    userrole_mapping userrole_mapping[]
}

model roles {
    id               BigInt             @id @default(autoincrement())
    rolename         String
    userrole_mapping userrole_mapping[]
}

model surveyresponses {
    id            BigInt    @id @default(autoincrement())
    user_id       BigInt?
    survey_id     BigInt?
    response_data Json
    createdat     DateTime? @default(now()) @db.Timestamptz(6)
    surveys       surveys?  @relation(fields: [survey_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users         users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model surveys {
    id              BigInt            @id @default(autoincrement())
    title           String
    surveyfields    Json
    createdby       BigInt?
    createdat       DateTime?         @default(now()) @db.Timestamptz(6)
    closes_at       DateTime          @db.Timestamptz(6)
    surveyresponses surveyresponses[]
    users           users?            @relation(fields: [createdby], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ticketpriority {
    id      BigInt    @id @default(autoincrement())
    name    String    @unique
    tickets tickets[]
}

model tickets {
    id                              BigInt          @id @default(autoincrement())
    title                           String
    description                     String
    subcategory_id                  BigInt?
    priority                        BigInt?
    status                          BigInt?
    createdby                       BigInt?
    createdat                       DateTime?       @default(now()) @db.Timestamptz(6)
    assignedto                      BigInt?
    closedby                        BigInt?
    closedat                        DateTime?       @db.Timestamptz(6)
    users_tickets_assignedtoTousers users?          @relation("tickets_assignedtoTousers", fields: [assignedto], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users_tickets_closedbyTousers   users?          @relation("tickets_closedbyTousers", fields: [closedby], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users_tickets_createdbyTousers  users?          @relation("tickets_createdbyTousers", fields: [createdby], references: [id], onDelete: NoAction, onUpdate: NoAction)
    ticketpriority                  ticketpriority? @relation(fields: [priority], references: [id], onDelete: NoAction, onUpdate: NoAction)
    ticketstatus                    ticketstatus?   @relation(fields: [status], references: [id], onDelete: NoAction, onUpdate: NoAction)
    category                        category?       @relation(fields: [subcategory_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ticketstatus {
    id      BigInt    @id @default(autoincrement())
    name    String    @unique
    tickets tickets[]
}

model userrole_mapping {
    id                BigInt    @id @default(autoincrement())
    user_id           BigInt?
    role_id           BigInt?
    group_id          BigInt?
    category_id       BigInt?
    can_create_survey Boolean?  @default(false)
    category          category? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    groups            groups?   @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    roles             roles?    @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users             users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
    id                                BigInt             @id @default(autoincrement())
    username                          String
    email                             String
    password                          String
    createdat                         DateTime?          @default(now()) @db.Timestamptz(6)
    updatedat                         DateTime?          @default(now()) @db.Timestamptz(6)
    isactive                          Boolean?           @default(true)
    feedbacks                         feedbacks[]
    surveyresponses                   surveyresponses[]
    surveys                           surveys[]
    tickets_tickets_assignedtoTousers tickets[]          @relation("tickets_assignedtoTousers")
    tickets_tickets_closedbyTousers   tickets[]          @relation("tickets_closedbyTousers")
    tickets_tickets_createdbyTousers  tickets[]          @relation("tickets_createdbyTousers")
    userrole_mapping                  userrole_mapping[]
}
